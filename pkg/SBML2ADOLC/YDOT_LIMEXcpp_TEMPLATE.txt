/*
c#comment compartments
c  com[%3d]  :   %-42s
c
c#comment species
c  spe[%3d]  :   %-42s
c
c#comment parameters
c  par[%3d]  :   %-42s
*/
// #include <cmath>
#include <cstring>
#include <algorithm>
// do not even think to #include "ydot_LIMEXcpp.h"
#define MAXIDSTRLEN 64
/**/
#define ADOLC_TAPELESS
c#species
#define NUM_SPE %d
c#parameters
#define NUM_PAR %d
#define NUMBER_DIRECTIONS (NUM_SPE + NUM_PAR)
#include <adolc/adouble.h>
typedef adtl::adouble adouble;
// ... #include <adolc/adtl.h>
ADOLC_TAPELESS_UNIQUE_INTERNALS;

/**/
#include "sbml_mathfuns_cpp.hpp"
/**/
using namespace ODEydot;
// using namespace std;

//=======================================================================
extern "C" {
//=======================================================================

struct
{
c#compartments
      double  com[%d];
c#species
      double  spe[%d];
c#parameters
      double  par[%d];
c#rules
      double  rul[%d];
c#reactions
      double  rea[%d];
c#events
      int     eve[%d];
/*
c#compartments
      adouble adcom[%d];
c#species
      adouble adspe[%d];
c#parameters
      adouble adpar[%d];
c#rules
      adouble adrul[%d];
c#reactions
      adouble adrea[%d];
c#events
      int     adeve[%d];
c#parameters
      int     apidx[%d];
      int     npidx;
*/
} sbmlvariables_;

//=======================================================================

struct {
c#compartments
      adouble com[%d];
c#species
      adouble spe[%d];
c#parameters
      adouble par[%d];
c#rules
      adouble rul[%d];
c#reactions
      adouble rea[%d];
c#events
      int     eve[%d];
c#parameters
      int     apidx[%d];
      int     npidx;
} advariables_;

//=======================================================================

#define  zero  0.0e0
#define  one   1.0e0
#define  pi    3.141592653589793238462643383276e0
#define  eul   2.718281828459045235360287471352e0
#define  com   PRE(variables_).com
#define  spe   PRE(variables_).spe
#define  par   PRE(variables_).par
#define  rul   PRE(variables_).rul
#define  rea   PRE(variables_).rea
#define  eve   PRE(variables_).eve
#define  apidx advariables_.apidx
#define  npidx advariables_.npidx

//=======================================================================
void compute_fy( int, double, double*, double*, double*, int* );
void compute_fp( int, int, double, double*, double*, int* );
void ydotAD ( int, double, adouble*, adouble*, int* );
void check_eventsAD ( double, int, int* ); 
void ydot ( int, double, double*, double*, int* );
void check_events ( double, int, int* ); 
//=======================================================================
};
//=======================================================================
namespace ODEydot {
c#block_for_all(j in functions)
template <typename T> 
c#args
T fun%d %s;
c#end_block
//-----------------------------------------------------------------------
c#block_for_all(j in pieces)
template <typename T> 
c#args
T piecewise%d %s;
c#end_block
};
//=======================================================================
extern "C" {
//=======================================================================

void ydot_slimex_ ( int* n, int* nz, double* t, double* y_state, double* dy,
                    double* b, int* ir, int* ic, int* info )
{
c#species
   int    nspe = %d;
   int    npar = npidx;
   /**/
   *nz = *n;
   for (int j = 0; j < *nz; ++j)
   {
      ir[j] =
      ic[j] = j+1;
       b[j] = one;
   }
   /**/
   if ( *n == nspe )
   {
c#for_all(j in algebraic)
      b[%d] = zero;

      ydot ( *n, *t, y_state, dy, info );

      return;
   }
   /**/
   double fp[npar*nspe];
   double fy[nspe*nspe];
   double  s[*n];
   /**/
   for (int j = 0; j < *n; ++j)
   {
     s[j] = y_state[j];
   }
   /**/
   compute_fy( nspe, *t, y_state, dy, fy, info );
   compute_fp( nspe, npar, *t, y_state, fp, info );
   /**/
   for (int idx = 0; idx < npar; ++idx)
   {
      for (int j = 0; j < nspe; ++j)
      {
          double sum = fp[j + nspe*idx];
          /**/
          for (int nu = 0; nu < nspe; ++nu)
          {
              sum += fy[j + nspe*nu] * s[nu + nspe*(idx+1)];
          } 
          dy[j + nspe*(idx+1)] = sum;
      }
   }
}

//=======================================================================

#define PRE(x) ad ## x
void compute_fy( int nspe, double t, double* y_state, 
                 double* dy, double* fy, int* info )
{
   /// adtl::setNumDir(nspe);
   adouble ay[nspe], ady[nspe];
   /**/
   for (int j = 0; j < nspe; ++j)
   {
      ay[j] = y_state[j];
      ay[j].setADValue(j,1);
   }
   /**/
   ydotAD ( nspe, t, ay, ady, info );
   /**/
   for (int k = 0; k < nspe; ++k)
   {
      dy[k] = ady[k].getValue();
      /**/
      for (int j = 0; j < nspe; ++j)
      {
         fy[ j + nspe*k ] = ady[j].getADValue(k);
      }
   }
}

//-----------------------------------------------------------------------

void compute_fp( int nspe, int npar, double t, double* y_state, 
                 double* fp, int* info )
{
   /// adtl::setNumDir(npar);
   adouble ay[nspe], ady[nspe];
   /**/
   for (int j = 0; j < nspe; ++j)
   {
      ay[j] = y_state[j];
      ay[j].setADValue(j,0);
   }
   for (int k = 0; k < npar; ++k)
   {
      if ( apidx[k] > 0 )
      {  
         int ell = apidx[k]-1;
         par[ ell ].setADValue(nspe+ell,1);
      }
   }
   /**/
   ydotAD ( nspe, t, ay, ady, info );
   /**/
   for (int k = 0; k < npar; ++k)
   {
      if ( apidx[k] > 0 )
      {
         int ell = apidx[k]-1;
         for (int j = 0; j < nspe; ++j)
         {
            fp[ j + nspe*k ] = ady[j].getADValue(nspe+ell);
         }
         par[ ell ].setADValue(nspe+ell,0);
      }
      else
      {
         for (int j = 0; j < nspe; ++j)
         {
            fp[ j + nspe*k ] = zero;
         }
      }
   }
}
#undef PRE

//======================================================================= 

#define PRE(x) ad ## x
void ydotAD ( int n, double t, adouble* y, adouble* dy, int* info)
{
/*
c#for_all(j in functions)
   adouble fun%d(...);
c#for_all(j in pieces)
   adouble piecewise%d(...);
*/

   *info = 0;

   for (int j = 0; j < n; ++j)
   {
      spe[j] = y[j];
       dy[j] = zero;
   }

//-----------------------------------------------------------------------
c#events
   check_eventsAD (t, %d, eve);
//-----------------------------------------------------------------------

c#for_all(j in assignments)
   rul[%d] = %s;

//-----------------------------------------------------------------------
c#events
   check_eventsAD (t, %d, eve);
//-----------------------------------------------------------------------

c#for_all(j in reactions)
   rea[%d] = %s;

//-----------------------------------------------------------------------
c#events
   check_eventsAD (t, %d, eve);
//-----------------------------------------------------------------------

c#for_all(j in rates)
   dy[%d] = %s;
}

//======================================================================= 

void check_eventsAD ( double t, int n, int* ev)
{
/*
c#for_all(j in functions)
   adouble fun%d(...);
c#for_all(j in pieces)
   adouble piecewise%d(...);
*/

c#block_for_all(j in events)
c#trigs
   ev[%d] = %s;

c#if_trig
   if ( ev[%d] )
   {
c#for_all(j in eventassignments)
      %s = %s;
   }

c#end_block

}
#undef PRE

//======================================================================= 

// #define PRE(x) sbml ## x
#undef com
#undef spe
#undef par
void init_var_ ( int* nidx, int* pidx )
{
c#compartments
   int ncom = %d;
c#species
   int nspe = %d;
c#parameters
   int npar = %d;
   /**/
   for (int j = 0; j < ncom; ++j)
   {
      advariables_.com[j] = sbmlvariables_.com[j];
   }
   /**/
   for (int j = 0; j < nspe; ++j)
   {
      advariables_.spe[j] = sbmlvariables_.spe[j];
   }
   /**/
   for (int j = 0; j < npar; ++j)
   {
      advariables_.par[j] = sbmlvariables_.par[j];
   }
   /**/
   int midx = std::min(npar,*nidx);
   for (int idx = 0; idx < midx; ++idx)
   {
      apidx[idx] = pidx[idx];
   }
   npidx = midx;
   /**/
   // adtl::setNumDir(nspe + midx);
}
#define com PRE(variables_).com
#define spe PRE(variables_).spe
#define par PRE(variables_).par
// #undef PRE

//======================================================================= 

void ydot_limex_ ( int* n, int* nz, double* t, double* y_state, double* dy, 
                   double* b, int* ir, int* ic, int* info )
{
   *nz = *n;

   for (int j = 0; j < *nz; ++j)
   {
      ir[j] =
      ic[j] = j+1;
       b[j] = one;
   }

c#for_all(j in algebraic)
   b[%d] = zero;

   ydot ( *n, *t, y_state, dy, info );
}

//=======================================================================
#define PRE(x) sbml ## x
void ydot ( int n, double t, double* y, double* dy, int* info )
{
/*
c#for_all(j in functions)
   T fun%d(...);
c#for_all(j in pieces)
   T piecewise%d(...);
*/

   *info = 0;

   for (int j = 0; j < n; ++j)
   {
      spe[j] = y[j];
       dy[j] = zero;
   }

//-----------------------------------------------------------------------
c#events
   check_events (t, %d, eve);
//-----------------------------------------------------------------------

c#for_all(j in assignments)
   rul[%d] = %s;

//-----------------------------------------------------------------------
c#events
   check_events (t, %d, eve);
//-----------------------------------------------------------------------

c#for_all(j in reactions)
   rea[%d] = %s;

//-----------------------------------------------------------------------
c#events
   check_events (t, %d, eve);
//-----------------------------------------------------------------------

c#for_all(j in rates)
   dy[%d] = %s;
}

//=======================================================================

void check_events ( double t, int n, int* ev )
{
/*
c#for_all(j in functions)
   T fun%d(...);
c#for_all(j in pieces)
   T piecewise%d(...);
*/

c#block_for_all(j in events)
c#trigs
   ev[%d] = %s;

c#if_trig
   if ( ev[%d] )
   {
c#for_all(j in eventassignments)
      %s = %s;
   }

c#end_block

}
#undef PRE

//=======================================================================

#define PRE(x) sbml ## x
void init_ode_ ( double* c, int* ic, int* lc ,  
                 double* s, int* is, int* ls ,  
                 double* p, int* ip, int* lp )
{
c#for_all(j in compartments)
   com[%3d] = %e;

c#for_all(j in species)
   spe[%3d] = %e;

c#for_all(j in parameters)
   par[%3d] = %e;

c#for_all(j in rulex)
   rul[%3d] = %e;

//-----------------------------------------------------------------------

c#compartments
   int mc = std::min(%d,*lc);

   if ( ic[0] == 0 )
   {
      for (int j = 0; j < mc; ++j)
      {
         com[ j ] = c[j];
      }
   }
   else
   {
      for (int j = 0; j < mc; ++j)
      {
         com[ ic[j]-1 ] = c[j];
      }
   }

   if ( *lc == 0 )
   {
c#compartments
      *lc = %d;
   }

//-----------------------------------------------------------------------

c#species
   int ms = std::min(%d,*ls);

   if ( is[0] == 0 )
   {
      for (int j = 0; j < ms; ++j)
      {
            spe[ j ] = s[j];
      }
   }
   else
   {
      for (int j = 0; j <  ms; ++j)
      {
         spe[ is[j]-1 ] = s[j];
      }
   }

   if ( *ls == 0 )
   {
c#species
      *ls = %d;
   }
 
//-----------------------------------------------------------------------

c#parameters
   int mp = std::min(%d,*lp);

   if ( ip[0] == 0 )
   {
      for (int j = 0; j < mp; ++j)
      {
         par[ j ] = p[j];
      }
   }
   else
   {
      for (int j = 0; j < mp; ++j)
      {
         par[ ip[j]-1 ] = p[j];
      }
   }

   if ( *lp == 0 )
   {
c#parameters
      *lp = %d;
   }
}
#undef PRE

//=======================================================================

void get_compartment_ids_ ( char (*idc)[MAXIDSTRLEN], int* ncom, int _len)
{
c#compartments
   *ncom = %d;
c#comment compartments
   std::strncpy(idc[%3d],"%s\0",_len);
}

//=======================================================================

void get_species_ids_ ( char (*ids)[MAXIDSTRLEN], int* nspe, int _len)
{
c#species
   *nspe = %d;

   for (int j = 0; j < *nspe; ++j)
   {
      std::strncpy(ids[j],"\0",_len);
   }

c#comment species
   std::strncpy(ids[%3d],"%s\0",_len);
}

//=======================================================================

void get_parameter_ids_ ( char (*idp)[MAXIDSTRLEN], int* npar, int _len)
{
c#parameters
   *npar = %d;
   for (int j = 0; j < *npar; ++j)
   {
      std::strncpy(idp[j],"\0",_len);
   }

c#comment parameters
   std::strncpy(idp[%3d],"%s\0",_len);
}

//=======================================================================

void get_model_ids_ ( char (*idm)[MAXIDSTRLEN], int* nid, int _len)
{
c#modelids
   *nid = %d;

   for (int j = 0; j < *nid; ++j)
   {
      std::strncpy(idm[j],"\0",_len);
   }

c#comment modelids
   std::strncpy(idm[%3d],"%s\0",_len);
}

//=======================================================================
};
//=======================================================================

c#block_for_all(j in functions)
//=======================================================================
template<typename T> 
c#args
T ODEydot::fun%d %s
/*
c#for_all(j in decls)
      T&  %s;
*/
{
c#funcs
      T ret%d;
c#impls
      ret%d = %s;
c#funcs
      return ret%d;
}
c#end_block

c#block_for_all(j in pieces)
//=======================================================================
template <typename T> 
c#args
T ODEydot::piecewise%d %s
/*
c#for_all(j in dbledecls)
      T&  %s;
c#for_all(j in logicdecls)
      int %s;
*/
{
c#funcs
      T ret%d;

c#3lines_first_case
      if ( %s )
      {
         ret%d = %s;
c#for_all_3lines(j in remaining_cases)
      } else if ( %s )
      {
         ret%d = %s;
c#3lines_default
      } else
      {
         ret%d = %s;
      }

c#funcs
      return ret%d;
}
c#end_block

//=======================================================================
