/*
c#comment compartments
c  com[%3d]  :   %-42s
c
c#comment species
c  spe[%3d]  :   %-42s
c
c#comment parameters
c  par[%3d]  :   %-42s
*/
#include <cmath>
#include <cstring>
#include <algorithm>
// do not even think to #include "ydot_LIMEXcpp.h"
/**/
#define MAXIDSTRLEN 64

/**/
using namespace std;

//=======================================================================
extern "C" {
//=======================================================================

struct
{
c#compartments
      double  com[%d];
c#species
      double  spe[%d];
c#parameters
      double  par[%d];
c#rules
      double  rul[%d];
c#reactions
      double  rea[%d];
c#events
      int     eve[%d];

} sbmlvariables_;

//=======================================================================
};
//=======================================================================

#define  zero  0.0e0
#define  one   1.0e0
#define  pi    3.141592653589793238462643383276e0
#define  eul   2.718281828459045235360287471352e0
#define  com   sbmlvariables_.com
#define  spe   sbmlvariables_.spe
#define  par   sbmlvariables_.par
#define  rul   sbmlvariables_.rul
#define  rea   sbmlvariables_.rea
#define  eve   sbmlvariables_.eve

//=======================================================================
      template <typename T>
      void ydot ( int, T, T*, T*, int* );
      template <typename T>
      void check_events ( T, int, int* ); 
//-----------------------------------------------------------------------
c#block_for_all(j in functions)
c#args
      template <typename T> T fun%d %s;
c#end_block
//-----------------------------------------------------------------------
c#block_for_all(j in pieces)
c#args
      template <typename T> T piecewise%d %s;
c#end_block
//=======================================================================

void ydot_slimex_ ( int* n, int* nz, double* t, double* y_state, double* dy,
                    double* b, int* ir, int* ic, int* info )
{
   *info = -999;
}

//=======================================================================

void ydot_limex_ ( int* n, int* nz, double* t, double* y_state, double* dy, 
                   double* b, int* ir, int* ic, int* info )
{
   *nz = *n;

   for (int j = 0; j < *nz; ++j)
   {
      ir[j] =
      ic[j] = j+1;
       b[j] = one;
   }

c#for_all(j in algebraic)
   b[%d] = zero;

   ydot ( *n, *t, y_state, dy, info );
}

//=======================================================================

template <typename T>
void ydot ( int n, T t, T* y_state, T* dy, int* info )
{
/*
c#for_all(j in functions)
   T fun%d(...);
c#for_all(j in pieces)
   T piecewise%d(...);
*/

   *info = 0;

   for (int j = 0; j < n; ++j)
   {
      spe[j] = y_state[j];
       dy[j] = zero;
   }

//-----------------------------------------------------------------------
c#events
   check_events<T> (t, %d, eve);
//-----------------------------------------------------------------------

c#for_all(j in assignments)
   rul[%d] = %s;


//-----------------------------------------------------------------------
c#events
   check_events<T> (t, %d, eve);
//-----------------------------------------------------------------------


c#for_all(j in reactions)
   rea[%d] = %s;

//-----------------------------------------------------------------------
c#events
   check_events<T> (t, %d, eve);
//-----------------------------------------------------------------------

c#for_all(j in rates)
   dy[%d] = %s;
}

//=======================================================================

template <typename T>
void check_events ( T t, int n, int* ev )
{
/*
c#for_all(j in functions)
   T fun%d(...);
c#for_all(j in pieces)
   T piecewise%d(...);
*/

c#block_for_all(j in events)
c#trigs
   ev[%d] = %s;

c#if_trig
   if ( ev[%d] )
   {
c#for_all(j in eventassignments)
      %s = %s;
   }

c#end_block

}

//=======================================================================

void init_ode_ ( double* c, int* ic, int* lc ,  
                 double* s, int* is, int* ls ,  
                 double* p, int* ip, int* lp )
{
c#for_all(j in compartments)
   com[%3d] = %e;

c#for_all(j in species)
   spe[%3d] = %e;

c#for_all(j in parameters)
   par[%3d] = %e;

c#for_all(j in rulex)
   rul[%3d] = %e;

//-----------------------------------------------------------------------

c#compartments
   int mc = std::min(%d,*lc);

   if ( ic[0] == 0 )
   {
      for (int j = 0; j < mc; ++j)
      {
         com[ j ] = c[j];
      }
   }
   else
   {
      for (int j = 0; j < mc; ++j)
      {
         com[ ic[j]-1 ] = c[j];
      }
   }

   if ( *lc == 0 )
   {
c#compartments
      *lc = %d;
   }

//-----------------------------------------------------------------------

c#species
   int ms = std::min(%d,*ls);

   if ( is[0] == 0 )
   {
      for (int j = 0; j < ms; ++j)
      {
            spe[ j ] = s[j];
      }
   }
   else
   {
      for (int j = 0; j <  ms; ++j)
      {
         spe[ is[j]-1 ] = s[j];
      }
   }

   if ( *ls == 0 )
   {
c#species
      *ls = %d;
   }
 
//-----------------------------------------------------------------------

c#parameters
   int mp = std::min(%d,*lp);

   if ( ip[0] == 0 )
   {
      for (int j = 0; j < mp; ++j)
      {
         par[ j ] = p[j];
      }
   }
   else
   {
      for (int j = 0; j < mp; ++j)
      {
         par[ ip[j]-1 ] = p[j];
      }
   }

   if ( *lp == 0 )
   {
c#parameters
      *lp = %d;
   }
}

//=======================================================================

void get_compartment_ids_ ( char (*idc)[MAXIDSTRLEN], int* ncom, int _len)
{
c#compartments
   *ncom = %d;
c#comment compartments
   strncpy(idc[%3d],"%s\0",_len);
}

//=======================================================================

void get_species_ids_ ( char (*ids)[MAXIDSTRLEN], int* nspe, int _len)
{
c#species
   *nspe = %d;

   for (int j = 0; j < *nspe; ++j)
   {
      strncpy(ids[j],"\0",_len);
   }

c#comment species
   strncpy(ids[%3d],"%s\0",_len);
}

//=======================================================================

void get_parameter_ids_ ( char (*idp)[MAXIDSTRLEN], int* npar, int _len)
{
c#parameters
   *npar = %d;
   for (int j = 0; j < *npar; ++j)
   {
      strncpy(idp[j],"\0",_len);
   }

c#comment parameters
   strncpy(idp[%3d],"%s\0",_len);
}

//=======================================================================

void get_model_ids_ ( char (*idm)[MAXIDSTRLEN], int* nid, int _len)
{
c#modelids
   *nid = %d;

   for (int j = 0; j < *nid; ++j)
   {
      strncpy(idm[j],"\0",_len);
   }

c#comment modelids
   strncpy(idm[%3d],"%s\0",_len);
}

//=======================================================================

c#block_for_all(j in functions)
//=======================================================================
c#args
      template<typename T> T fun%d %s
/*
c#for_all(j in decls)
      T   %s;
*/
{
c#funcs
      T ret%d;
c#impls
      ret%d = %s;
c#funcs
      return ret%d;
}
c#end_block

c#block_for_all(j in pieces)
//=======================================================================
c#args
      template <typename T> T piecewise%d %s
/*
c#for_all(j in dbledecls)
      T   %s;
c#for_all(j in logicdecls)
      int %s;
*/
{
c#funcs
      T ret%d;

c#3lines_first_case
      if ( %s )
      {
         ret%d = %s;
c#for_all_3lines(j in remaining_cases)
      } else if ( %s )
      {
         ret%d = %s;
c#3lines_default
      } else
      {
         ret%d = %s;
      }

c#funcs
      return ret%d;
}
c#end_block

//=======================================================================
